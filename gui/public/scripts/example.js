/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var Comment = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },

  render: function() {
    var color;
    if (this.props.is_good == 'unknown') {
      color = 'black';
    } else if (this.props.is_good) {
      color = 'green';
    } else {
      color = 'red';
    }
    return (
      <div className="comment">
        <span
          dangerouslySetInnerHTML={this.rawMarkup()}
          style={{color:color}}
        />
      </div>
    );
  }
});

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.is_good = 'unknown';  // Do this so color appears black initially
    comment.id = Date.now();
    var newComments = [comment].concat(comments);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
        <h4 className="title">grbge word detctr</h4>
        <div className="commentForm">
          <CommentForm url="/api/classify_word/" onCommentSubmit={this.handleCommentSubmit} />
        </div>
        <div>
          <div>
            <CommentList className="commentList" data={this.state.data} />
          </div>
          <div>
            <CandidateBox className="candidateBox" url="/api/speechblocks/get_words" />
          </div>
        </div>
      </div>
    );
  }
});

var CandidateBox = React.createClass({
  loadCandidatesFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCandidatesFromServer();
  },
  render: function() {
    return (
      <div className="candidateBox">
        <div>
          <CandidateList data={this.state.data} />
        </div>
      </div>
    );
  }
});

var CandidateList = React.createClass({
  // handleCandidateClick: function() {
  //   console.log('hi');
  //   // TODO: make an ajax call, classify and add to words, retrieve new word
  // },
  render: function() {
    var candidateNodes = this.props.data.map(function(candidate) {
      return (
        <Candidate
          key={candidate.id}
          // onCClick={this.handleCandidateClick}
        >
          {candidate.word}
        </Candidate>
      );
    });
    return (
      <div className="candidateList">
        {candidateNodes}
      </div>
    );
  }
});

var Candidate = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },
  // handleClick: function(e) {
  //   console.log('hi');
  //   console.log(e);
  // },
  render: function() {
    return (
      <div className="candidate">
        <span
          dangerouslySetInnerHTML={this.rawMarkup()}
          // onClick={this.props.onCClick}
        />
      </div>
    );
  }
});



var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment key={comment.id} is_good={comment.is_good}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {text: ''};
  },
  handleTextChange: function(e) {
    // console.log(this.props.classify_word_url);
    var text = e.target.value;
    if (text.length > 0) {
      $.ajax({
        url: this.props.url + text,
        type: 'GET',
        success: function(data) {
          this.state.color = data[0] ? 'green' : 'red';
          this.setState(this.state);  // setState to renender
        }.bind(this),
        error: function(xhr, status, err) {
          // this.setState({data: comments});
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });
    }
    this.setState({text: text});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var text = this.state.text.trim();
    if (!text) {
      return;
    }
    this.props.onCommentSubmit({text: text});
    this.setState({text: ''});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
          style={{color: this.state.color}}
        />
      </form>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/api/submit_word" pollInterval={2000} />,
  document.getElementById('content')
);
